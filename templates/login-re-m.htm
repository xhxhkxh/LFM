<!DOCTYPE html>
<html lang="en">

<head lang="zh">
    <meta charset="utf-8">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.2/anime.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <style type="text/css">
        @font-face {
            font-family: hsr;
            src: url(../fonts/hsr.TTF);
        }

        body {
            font-family: hsr;
        }

        html {
            background-image: url("../static/background.svg");
            background-repeat: no-repeat;
            background-size: cover;
            background-position: center center;
            /* 背景图不平铺 */
            background-repeat: no-repeat;
            /* 当内容高度大于图片高度时，背景图像的位置相对于viewport固定 */
            background-attachment: fixed;
            /* 让背景图基于容器大小伸缩 */
        }

        .login {

            background-color: #f4f4f4;
            position: absolute;
            transform: translate(-50%, -50%);
            top: 25%;
            left: 30%;
            border-radius: 2rem;
            padding-left: 3rem;
            padding-bottom: 2rem;
            padding-top: 2rem;
            padding-right: 3rem;
            margin-left: 2rem;
        }

        .login .title {
            text-align: center;
        }

        .login .close {
            float: right;
            border-style: solid;
            background-color: #777;
            border-color: #777;
            ;


        }

        .profile {
            float: left;
        }

        .pwd {
            float: left;
        }

        .loginBtn {
            transform: translate(80%, 10%);
            left: 1%;
        }

        .close-btn {
            float: right;
        }

        .hd {
            display: none;
        }

        .signinBtn {
            float: right;
            transform: translate(10%, -100%);
        }

        .sf {
            display: block;
        }

        .loginBtn {
            transform: translate(40%, 10%);
            left: 1%;
        }
    </style>

    <!-- Core SHA256 Script -->
    <script>
        function sha256(s) {
            const chrsz = 8
            const hexcase = 0

            function safe_add(x, y) {
                const lsw = (x & 0xFFFF) + (y & 0xFFFF)
                const msw = (x >> 16) + (y >> 16) + (lsw >> 16)
                return (msw << 16) | (lsw & 0xFFFF)
            }

            function S(X, n) {
                return (X >>> n) | (X << (32 - n))
            }

            function R(X, n) {
                return (X >>> n)
            }

            function Ch(x, y, z) {
                return ((x & y) ^ ((~x) & z))
            }

            function Maj(x, y, z) {
                return ((x & y) ^ (x & z) ^ (y & z))
            }

            function Sigma0256(x) {
                return (S(x, 2) ^ S(x, 13) ^ S(x, 22))
            }

            function Sigma1256(x) {
                return (S(x, 6) ^ S(x, 11) ^ S(x, 25))
            }

            function Gamma0256(x) {
                return (S(x, 7) ^ S(x, 18) ^ R(x, 3))
            }

            function Gamma1256(x) {
                return (S(x, 17) ^ S(x, 19) ^ R(x, 10))
            }

            function core_sha256(m, l) {
                const K = [0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0xFC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x6CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2]
                const HASH = [0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19]
                const W = new Array(64)
                let a, b, c, d, e, f, g, h, i, j
                let T1, T2
                m[l >> 5] |= 0x80 << (24 - l % 32)
                m[((l + 64 >> 9) << 4) + 15] = l
                for (i = 0; i < m.length; i += 16) {
                    a = HASH[0]
                    b = HASH[1]
                    c = HASH[2]
                    d = HASH[3]
                    e = HASH[4]
                    f = HASH[5]
                    g = HASH[6]
                    h = HASH[7]
                    for (j = 0; j < 64; j++) {
                        if (j < 16) {
                            W[j] = m[j + i]
                        } else {
                            W[j] = safe_add(safe_add(safe_add(Gamma1256(W[j - 2]), W[j - 7]), Gamma0256(W[j - 15])), W[j - 16])
                        }
                        T1 = safe_add(safe_add(safe_add(safe_add(h, Sigma1256(e)), Ch(e, f, g)), K[j]), W[j])
                        T2 = safe_add(Sigma0256(a), Maj(a, b, c))
                        h = g
                        g = f
                        f = e
                        e = safe_add(d, T1)
                        d = c
                        c = b
                        b = a
                        a = safe_add(T1, T2)
                    }
                    HASH[0] = safe_add(a, HASH[0])
                    HASH[1] = safe_add(b, HASH[1])
                    HASH[2] = safe_add(c, HASH[2])
                    HASH[3] = safe_add(d, HASH[3])
                    HASH[4] = safe_add(e, HASH[4])
                    HASH[5] = safe_add(f, HASH[5])
                    HASH[6] = safe_add(g, HASH[6])
                    HASH[7] = safe_add(h, HASH[7])
                }
                return HASH
            }

            function str2binb(str) {
                const bin = []
                const mask = (1 << chrsz) - 1
                for (let i = 0; i < str.length * chrsz; i += chrsz) {
                    bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << (24 - i % 32)
                }
                return bin
            }

            function Utf8Encode(string) {
                string = string.replace(/\r\n/g, '\n')
                let utfText = ''
                for (let n = 0; n < string.length; n++) {
                    const c = string.charCodeAt(n)
                    if (c < 128) {
                        utfText += String.fromCharCode(c)
                    } else if ((c > 127) && (c < 2048)) {
                        utfText += String.fromCharCode((c >> 6) | 192)
                        utfText += String.fromCharCode((c & 63) | 128)
                    } else {
                        utfText += String.fromCharCode((c >> 12) | 224)
                        utfText += String.fromCharCode(((c >> 6) & 63) | 128)
                        utfText += String.fromCharCode((c & 63) | 128)
                    }
                }
                return utfText
            }

            function binb2hex(binarray) {
                const hex_tab = hexcase ? '0123456789ABCDEF' : '0123456789abcdef'
                let str = ''
                for (let i = 0; i < binarray.length * 4; i++) {
                    str += hex_tab.charAt((binarray[i >> 2] >> ((3 - i % 4) * 8 + 4)) & 0xF) +
                        hex_tab.charAt((binarray[i >> 2] >> ((3 - i % 4) * 8)) & 0xF)
                }
                return str
            }
            s = Utf8Encode(s)
            return binb2hex(core_sha256(str2binb(s), s.length * chrsz))
        }


    </script>

    <!-- Login / Signin Utility -->
    <script>
        function getResponce() {
            var name = document.getElementById("sname").value;
            var pwd = document.getElementById("spwd").value = sha256(document.getElementById("spwd").value);
            // alert(name);
            // alert(pwd);

            var url = "https://" + window.location.host + "/home/signin";
            const request = new XMLHttpRequest();
            request.open("POST", url, true);
            request.setRequestHeader('Conten-Type', 'application/x-www-form-urlencoded');
            var data = new FormData();
            data.append("name", name);
            data.append("password", pwd);
            request.send(data);
            request.onreadystatechange = (e) => {
                if (request.readyState == 4) {
                    console.log(request.responseText);
                    console.log(e);
                    // alert(request.responseText);
                    if (request.responseText == "OK") {
                        // successfully created
                        signSuccess();
                    }
                    else {
                        signFail(request.responseText);
                    }
                    console.log(request.responseText);

                }
            }
            /*
            url = window.location.href + "/signin?name";
            console.warn("Receiving GET resonpce")
            $.get(url, function (data, sataus) {
                console.info("Returned data:" + data + "With status code:" + status);
                alert(data, status);
            })
            */
            document.getElementById("spwd").value = "";
        } // Sign in

        function login() {
            var uname = document.getElementById("name").value;
            var upwd = document.getElementById("pwd").value = sha256(document.getElementById("pwd").value);
            // alert(name);
            // alert(pwd);

            var url = "https://" + window.location.host + "/home/login";
            const request = new XMLHttpRequest();
            request.open("POST", url);
            request.setRequestHeader('Conten-Type', 'application/x-www-form-urlencoded');
            var data = new FormData();
            data.append("name", uname);
            data.append("password", upwd);
            request.send(data);
            request.onreadystatechange = (e) => {
                if (request.readyState == 4) {
                    console.log(request.responseText);
                    console.log(e);
                    //alert(request.responseText);
                    if (request.responseText == "OK") {
                        // successfully created
                        window.location.href = "https://" + window.location.host + "/forum";
                    }
                    else if (request.responseText == 'username or password incorrect') {
                        expLog();
                    }
                    else {
                        document.write(request.responseText);
                    }
                    console.log(request.responseText);

                }
            }
            document.getElementById("pwd").value = "";
        } //loging
    </script>

    <script>
        function signSuccess() {
            document.getElementById("signsucc").classList.remove("d-none");
            anime({
                targets: '.signsucc',
                opacity: [0, 1],
                duration: 1500
            });
        }
        function signFail(res) {
            document.getElementById("failReason").textContent = "\
            注册失败！原因:"+ String(res);
            document.getElementById("faildiv").classList.remove("d-none");
            anime({
                targets: '.faildiv',
                opacity: [0, 1],
                duration: 1500
            });
        }
        // Web function script
        function loadAnim() {

            anime.timeline({ loop: false }).add({

                targets: ".hlt",
                opacity: [1, 0],
                display: "none",
                duration: 1850

            });

            anime.timeline({ loop: false }).add({
                targets: '.login',
                scale: [0, 2.5]
            });
        }

        function closeLogin() {
            document.getElementById("login").style.display = "none";
            document.getElementById("signin").style.display = "block";
            anime({
                targets: ".signin",
                opacity: [0, 1],
                duration: 1500
            });
        }

        function closeSignin() {
            document.getElementById("signin").style.display = "none";
            document.getElementById("login").style.display = "block";
            anime({
                targets: '.loginanim',
                opacity: [0, 1],
                duration: 1500
            });
        }

        function showSignin() {
            document.getElementById("signin").style.display = "block";
            anime({
                targets: ".signin",
                opacity: [0, 1],
                duration: 1500
            });
            anime({
                targets: '.loginanim',
                opacity: [1, 0],
                duration: 1500
            });
        }

        function showModal() {
            document.getElementById("successModal").classList.add('show');
        }

        function expLog() {
            document.getElementById("lf").classList.remove("d-none");
        }

        function hideph() {
            anime({
                targets: '.placeholder',
                opacity: [0, 1],
                duration: 1500
            });
            document.getElementById("placeholder").classList.add("d-none");
        }

        document.addEventListener("DOMContentLoaded", function () {
            hideph();
        })
    </script>
</head>



<body onload="loadAnim();" data-bs-theme="dark">

    <div class="card bg-dark" aria-hidden="true" id="placeholder">
        <div class="card-body">
            <h5 class="card-title placeholder-glow">
                <span class="placeholder col-6"></span>
            </h5>
            <p class="card-text placeholder-glow">
                <span class="placeholder col-7"></span>
                <span class="placeholder col-4"></span>
                <span class="placeholder col-4"></span>
                <span class="placeholder col-6"></span>
                <span class="placeholder col-8"></span>
            </p>
            <a class="btn btn-primary disabled placeholder col-6" aria-disabled="true"></a>
        </div>
    </div>

    <div class="login loginanim bg-dark" id="login" onload="hideph();" alter>
        <button type="button" class="btn-close close-btn float-end" aria-label="Close" onclick="closeLogin();"></button>
        <div id="lf" class="show fade d-none alert-dismissible alert alert-danger d-flex align-items-center"
            role="alert">
            <svg width="32px" height="32px" class="bi flex-shrink-0 me-2" role="img" aria-label="Danger:">
                <use xlink:href="#exclamation-triangle-fill" />
            </svg>
            <div>
                用户名或密码不正确！
            </div>
        </div>


        <h4 style="text-align: center;" class="text-primary">Login</h4>

        <div class="mb-3 form-floating">

            <input maxlength="30" type="username" class="form-control" aria-describedby="emailHelp" name="name"
                id="name" placeholder="username" onkeyup="value=value.replace(/[^\a-\z\A-\Z0-9\u4E00-\u9FA5\ ]/g,'')"
                onpaste="value=value.replace(/[^\a-\z\A-\Z0-9\u4E00-\u9FA5\ ]/g,'')"
                oninput="value=value.replace(/[^\a-\z\A-\Z0-9\u4E00-\u9FA5\ ]/g,'')">
            <label for="user" class="floatingInput">用户名</label>
            <div id="username" class="form-text text-secondary">请填入注册时输入的用户名<br />仅支持中文，英文和空格</div>
        </div>
        <div class="mb-3 form-floating">
            <input name="pwd" id="pwd" type="password" class="form-control" placeholder="Password">
            <label for="password" class="floatingInput text-secondary">密码</label>
        </div>
        <div class="mb-3 form-check">
            <input type="checkbox" class="form-check-input" id="exampleCheck1">
            <label class="form-check-label text-secondary" for="exampleCheck1">记住我</label>
        </div>
        <div class="signinBtn"><a href="#" onclick="showSignin();" class="text-secondary">没有账号?点击注册</a></div>
        <!-- οnkeyup=“this.value=this.value.replace(/[^u4e00-u9fa5w]/g,’’)”> -->
        <button type="submit" class=" btn btn-primary position-absolute bottom-10 start-50 translate-middle-x"
            onclick="login();">Submit</button>
    </div>
    <!-- Signin form -->
    <div class="login hd signin bg-dark" id="signin" alter>
        <button type="button" class="btn-close close-btn float-end" aria-label="Close"
            onclick="closeSignin();"></button>
        <div class="alertsuccess signsucc">
            <div id="signsucc" class="d-none alert alert-success d-flex align-items-center" role="alert">
                <svg width="32px" height="32px" class="bi flex-shrink-0 me-2" role="img" aria-label="Success:">
                    <use xlink:href="#check-circle-fill" />
                </svg>
                <div class="text-secondary">
                    注册成功！
                    <br />
                    <small class="text-secondary">请转至登录页面登录</small>
                </div>
            </div>
        </div>
        <div id="faildiv" class="d-none alert alert-danger d-flex align-items-center" role="alert">
            <svg width="32px" height="32px" class="bi flex-shrink-0 me-2" role="img" aria-label="Danger:">
                <use xlink:href="#exclamation-triangle-fill" />
            </svg>
            <div id="failReason" class="signfail text-secondary">
                注册失败！原因:Network Error!
            </div>
        </div>

        <h4 style="text-align: center;" class="text-primary">Signin</h4>

        <div class="mb-3 form-floating">

            <input maxlength="30" type="username" class="form-control" aria-describedby="emailHelp"
                placeholder="username" onkeyup="value=value.replace(/[^\a-\z\A-\Z0-9\u4E00-\u9FA5\ ]/g,'')"
                onpaste="value=value.replace(/[^\a-\z\A-\Z0-9\u4E00-\u9FA5\ ]/g,'')"
                oninput="value=value.replace(/[^\a-\z\A-\Z0-9\u4E00-\u9FA5\ ]/g,'')" name="name" id="sname">
            <label for="user" class="floatingInput text-secondary">用户名</label>
            <div id="username" class="form-text text-secondary">仅支持中文，英文和空格<br>最多三十字</div>
        </div>
        <div class="mb-3 form-floating">
            <input type="password" name="pwd" id="spwd" class="form-control" placeholder="Password">
            <label for="password" class="floatingInput">密码</label>
        </div>
        <div class="loginBtn"><a href="#" class="text-secondary" onclick="closeSignin();">已有账户?点击登录</a></div>
        <!-- οnkeyup=“this.value=this.value.replace(/[^u4e00-u9fa5w]/g,’’)”> -->
        <button type="submit" onclick="getResponce();" class=" btn btn-primary bottom-10 start-50">Submit</button>
    </div>



    <svg xmlns="http://www.w3.org/2000/svg" class="d-none">
        <symbol id="check-circle-fill" viewBox="0 0 16 16">
            <path
                d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
        </symbol>
        <symbol id="info-fill" viewBox="0 0 16 16">
            <path
                d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z" />
        </symbol>
        <symbol id="exclamation-triangle-fill" viewBox="0 0 16 16">
            <path
                d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" />
        </symbol>
    </svg>


</body>

</html>